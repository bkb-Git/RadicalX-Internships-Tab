{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_ERRORBAR_SHAPE = 'errorbar';\nfunction renderBarPath(points) {\n  return [['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z'], ['M', ((points[1].x || 0) + (points[2].x || 0)) / 2, ((points[1].y || 0) + (points[2].y || 0)) / 2], ['L', ((points[0].x || 0) + (points[3].x || 0)) / 2, ((points[0].y || 0) + (points[3].y || 0)) / 2], ['Z'], ['M', points[0].x, points[0].y], ['L', points[3].x, points[3].y], ['Z']];\n}\nexport var registerShape = function () {\n  var barWidth = 1;\n  var hasPoint = false;\n  CustomizeUtils.registerShape('schema', DEFAULT_ERRORBAR_SHAPE, {\n    getPoints: function (_a) {\n      var _b = _a.x,\n        x = _b === void 0 ? 0 : _b,\n        _c = _a.y,\n        y = _c === void 0 ? [0, 0, 0] : _c,\n        _d = _a.size,\n        size = _d === void 0 ? 0 : _d;\n      return [{\n        x: x - size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x,\n        y: y[1]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[1]\n      }];\n    },\n    drawShape: function (cfg, group) {\n      var newGroup = group;\n      var points = cfg.points;\n      newGroup.addShape('path', {\n        attrs: __assign({\n          stroke: cfg.color,\n          strokeOpacity: cfg.opacity || 1,\n          lineWidth: cfg.style.lineWidth || 1,\n          fill: cfg.color,\n          opacity: cfg.opacity || 1,\n          path: this.parsePath(renderBarPath(points))\n        }, cfg.style)\n      });\n      if (hasPoint) {\n        newGroup.addShape('circle', {\n          attrs: __assign({\n            stroke: cfg.color,\n            strokeOpacity: cfg.opacity || 1,\n            lineWidth: cfg.style.lineWidth || 1,\n            fill: cfg.color,\n            opacity: cfg.opacity || 1,\n            x: this.parsePoint(points[4]).x,\n            y: this.parsePoint(points[4]).y,\n            r: cfg.style.lineWidth + 0.5 || 1.5\n          }, cfg.style)\n        });\n      }\n      return newGroup;\n    }\n  });\n};","map":{"version":3,"mappings":"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","names":["CustomizeUtils","DEFAULT_ERRORBAR_SHAPE","renderBarPath","points","x","y","registerShape","barWidth","hasPoint","getPoints","_a","_b","_c","_d","size","drawShape","cfg","group","newGroup","addShape","attrs","stroke","color","strokeOpacity","opacity","lineWidth","style","fill","path","parsePath","parsePoint","r"],"sourceRoot":"","sources":["../../src/shapes/ErrorBar.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}